// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/Q-n-A/Q-n-A/repository"
	"github.com/Q-n-A/Q-n-A/repository/gorm2"
	"github.com/Q-n-A/Q-n-A/server"
	"github.com/Q-n-A/Q-n-A/server/ping"
	"github.com/Q-n-A/Q-n-A/server/protobuf"
	"github.com/Q-n-A/Q-n-A/util/logger"
	"github.com/google/wire"
)

import (
	_ "net/http/pprof"
)

// Injectors from wire.go:

func setupServer(config *Config) (*server.Server, error) {
	gorm2Config := provideRepositoryConfig(config)
	loggerConfig := provideLoggerConfig(config)
	zapLogger := logger.NewZapLogger(loggerConfig)
	gorm2Repository, err := gorm2.NewGorm2Repository(gorm2Config, zapLogger)
	if err != nil {
		return nil, err
	}
	db, err := gorm2.GetSqlDB(gorm2Repository)
	if err != nil {
		return nil, err
	}
	store, err := server.NewMySQLStore(db)
	if err != nil {
		return nil, err
	}
	echo := server.NewEcho(store, zapLogger)
	pingService := ping.NewPingService()
	grpcServer := server.NewGRPCServer(zapLogger, pingService)
	serverConfig := provideServerConfig(config)
	serverServer := server.NewServer(echo, grpcServer, zapLogger, serverConfig)
	return serverServer, nil
}

// wire.go:

var serverSet = wire.NewSet(
	provideLoggerConfig, logger.NewZapLogger, provideRepositoryConfig, gorm2.NewGorm2Repository, wire.Bind(new(repository.Repository), new(*gorm2.Gorm2Repository)), gorm2.GetSqlDB, ping.NewPingService, wire.Bind(new(protobuf.PingServer), new(*ping.PingService)), server.NewMySQLStore, server.NewEcho, server.NewGRPCServer, provideServerConfig, server.NewServer,
)
