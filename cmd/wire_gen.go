// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/Q-n-A/Q-n-A/repository"
	"github.com/Q-n-A/Q-n-A/server"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func SetupServer(config *Config) (*server.Server, error) {
	serverConfig := provideServerConfig(config)
	repositoryConfig := provideRepositoryConfig(config)
	v := _wireValue
	logger, err := zap.NewProduction(v...)
	if err != nil {
		return nil, err
	}
	gormRepository, err := repository.NewGormRepository(repositoryConfig, logger)
	if err != nil {
		return nil, err
	}
	db, err := repository.GetSqlDB(gormRepository)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.InjectServer(serverConfig, db, logger)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

var (
	_wireValue = []zap.Option{}
)

// wire.go:

var serverSet = wire.NewSet(wire.Value([]zap.Option{}), zap.NewProduction, provideRepositoryConfig, repository.NewGormRepository, wire.Bind(new(repository.Repository), new(*repository.GormRepository)), repository.GetSqlDB, provideServerConfig, server.InjectServer)
